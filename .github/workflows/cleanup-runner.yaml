name: Runner Cleanup

on:
  workflow_dispatch:
    inputs:
      vmName:
        description: Name of the Azure VM
        type: string
        required: false

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
    - name: Set name of the VM to outputs
      uses: actions/github-script@v5
      id: setVMName
      with:
        script: |
          let name = context.payload.inputs.vmName;
          
          if (!name) {
            name = context.sha.substring(0, 8);
          }
          
          core.setOutput("name", name);

    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Delete Custom Runners
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const response = await github.rest.actions.listSelfHostedRunnersForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          console.log("runners", response.data.runners);
          
          // const runners = response.data.runners.filter(({ labels }) => {
          //   return labels.map(({ name }) => name).includes(context.sha);
          // });
          
          console.log("context", context);
          
          const runners = response.data.runners.filter(({ name }) => name === '${{ steps.setVMName.outputs.name }}'):
          
          console.log("filtered runners", runners);
          
          await Promise.all(runners.map(({ id }) => github.rest.actions.deleteSelfHostedRunnerFromRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            runner_id: id,
          })));

    - name: Delete Azure VM
      uses: azure/CLI@v1
      if: always()
      with:
        azcliversion: 2.31.0
        inlineScript: |
          vmID=$(az vm show \
            --resource-group ${{ secrets.AZURE_ENVOY_BUILD_RESOURCE_GROUP }} \
            --name envoy-${{ steps.setVMName.outputs.name }} \
            --query id \
            -o tsv 2> /dev/null)
          
          vmNIC=$(az vm nic list \
            --resource-group ${{ secrets.AZURE_ENVOY_BUILD_RESOURCE_GROUP }} \
            --vm-name envoy-${{ steps.setVMName.outputs.name }} \
            --query [].id \
            -o tsv 2> /dev/null)
          
          if [ -n $wmNIC ]; then
            vmIP=$(az network nic show \
              --ids $vmNIC \
              --query "ipConfigurations[].publicIpAddress.id" \
              -o tsv 2> /dev/null)
          
            vmNSG=$(az network nic show \
              --ids $vmNIC \
              --query "networkSecurityGroup.id" \
              -o tsv 2> /dev/null)
          fi
          
          if [ -n $vmID ]; then
            az vm delete \
              --ids $vmID \
              --yes
          fi

          if [ -n $vmIP ]; then          
            az network public-ip delete \
              --ids $vmIP
          fi
          
          if [ -n $vmNSG ]; then
            az network nsg delete \
              --ids $vmNSG
          fi
