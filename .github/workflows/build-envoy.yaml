name: Build Envoy for Windows

on:
  workflow_dispatch:
    inputs:
      createCustomRunner:
        description: >-
          Spawn an Azure VM (Windows 2019) and add it as a Custom GitHub Runner
        type: boolean
        required: true
        default: "true"
      buildEnvoy:
        description: Build Envoy
        type: boolean
        required: true
        default: "true"
      releaseArtifact:
        description: Release built Enovy artifact on https://download.konghq.com/
        type: boolean
        required: true
        default: "true"
      cleanup:
        description: Remove the Custom Runner and destroy the VM after finish
        type: boolean
        required: true
        default: "true"
      vmName:
        description: Name of the Azure VM (envoy-${GITHUB_SHA:7} if not set)
        type: string
        required: false
      vmImage:
        description: VM Image for self-hosted Github Actions Runner
        type: string
        required: true
        default: /subscriptions/6d1d2295-a73d-4e67-b2ba-0346952e7948/resourceGroups/bs-envoy-build/providers/Microsoft.Compute/images/windows2019
      vmSize:
        description: Size of the Azure VM which will be spawned to build Envoy
        type: choice
        required: true
        default: Standard_HB60rs
        options:
        - Standard_D8s_v3
        - Standard_D48s_v5
        - Standard_HB60rs
      startRunnerScriptURL:
        description: >-
          URL to script which will add a VM as a custom GitHub Actions Runner
          (Script has to be located on GitHub)
        type: string
        required: true
        default: https://raw.githubusercontent.com/kong/kong-mesh/master/tools/releases/envoy/windows/start-gh-runner.ps1
      commitHash:
        description: The hash of a commit to build Envoy from
        type: string
        required: true
        default: b16d390f11376e47f479778f2362ea4f48bdc895
      bazelTarget:
        description: Envoy target for Bazel
        type: string
        required: true
        default: >-
          //contrib/exe:envoy-static
            --//contrib/sxg/filters/http/source:enabled=false

jobs:
  deploy-custom-windows2019-runner:
    if: github.event.inputs.createCustomRunner == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Set name of the VM to outputs
      uses: actions/github-script@v5
      id: setVMName
      with:
        script: |
          let name = context.payload.inputs.vmName;

          if (!name) {
            name = context.sha.substring(0, 8);
          }

          core.setOutput("name", name);

    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure VM
      uses: azure/CLI@v1
      with:
        azcliversion: 2.31.0
        inlineScript: |
          az vm create \
            --name envoy-${{ steps.setVMName.outputs.name }} \
            --resource-group ${{ secrets.AZURE_ENVOY_BUILD_RESOURCE_GROUP }} \
            --image ${{ secrets.AZURE_ENVOY_BUILD_IMAGE }} \
            --admin-username ${{ secrets.AZURE_ENVOY_ADMIN_USERNAME }} \
            --admin-password ${{ secrets.AZURE_ENVOY_ADMIN_PASSWORD }} \
            --size ${{ github.event.inputs.vmSize }} \
            --priority Spot \
            --eviction-policy Delete \
            --os-disk-delete-option Delete \
            --nic-delete-option Delete \
            --license-type Windows_Client

    - name: Create Registration Token for Custom Runner and generate Runner Settings
      uses: actions/github-script@v5
      id: runnerToken
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const response = await github.rest.actions.createRegistrationTokenForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const { token } = response.data;

          core.setSecret(token);

          const repositoryURL = `https://github.com/${context.repo.owner}/${context.repo.repo}`;

          const runnerSettings = JSON.stringify({
            fileUris: [
              "${{ github.event.inputs.startRunnerScriptURL }}",
            ],
            commandToExecute: [
              "powershell.exe",
              "-File ghactions.ps1",
              `-Token ${token}`,
              "-LogonPassword ${{ secrets.AZURE_ENVOY_BUILD_LOGON_PASSWORD }}",
              `-RepositoryURL ${repositoryURL}`,
              `-Labels ${context.sha},Windows2019`,
            ].join(" "),
          });

          core.setOutput("runnerSettings", runnerSettings);

    - name: Install Github Actions Agent on Azure VM
      uses: azure/CLI@v1
      with:
        azcliversion: 2.31.0
        inlineScript: |
          az vm extension set \
            --resource-group ${{ secrets.AZURE_ENVOY_BUILD_RESOURCE_GROUP }} \
            --vm-name envoy-${{ steps.setVMName.outputs.name }} \
            --name CustomScriptExtension \
            --publisher Microsoft.Compute \
            --protected-settings '${{ steps.runnerToken.outputs.runnerSettings }}'

  build-envoy:
    if: github.event.inputs.buildEnvoy == 'true'
    runs-on:
    - self-hosted
    - Windows2019
    defaults:
      run:
        shell: bash
        working-directory: envoy
    steps:
    - name: Clone Repository
      uses: actions/checkout@v2
      with:
        token: ${{ github.token }}
        path: kong-mesh

    - name: Clone Envoy
      uses: actions/checkout@v2
      with:
        token: ${{ github.token }}
        ref: ${{ github.event.inputs.commitHash }}
        repository: envoyproxy/envoy
        path: envoy

    - name: Patch ./ci/windows_ci_steps.sh
      run: |
        patch ./ci/windows_ci_steps.sh ../kong-mesh/tools/releases/envoy/windows/windows_ci_steps_sh.patch

    - name: Build Envoy
      env:
        ENVOY_DOCKER_BUILD_DIR: "C:/build"
        # We have to leave some resources free, as if bazel will use all of them
        # the GitHub Actions Runner service will stop responding and any action
        # run on this machine will be cancelled
        BAZEL_BUILD_OPTIONS: >-
          --local_ram_resources=HOST_RAM*.9
          --local_cpu_resources=HOST_CPUS-1
      run: |
        ./ci/run_envoy_docker.sh 'ci/windows_ci_steps.sh ${{ github.event.inputs.bazelTarget }}'

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: envoy_${{ github.sha }}
        path: |
          C:/build/envoy/source/exe/envoy.exe

  releaseArtifact:
    if: github.event.inputs.releaseArtifact == 'true'
    needs:
    - build-envoy
    runs-on: ubuntu-latest
    steps:
    - name: Clone Kuma
      uses: actions/checkout@v2
      with:
        token: ${{ github.token }}
        ref: 19b4a049a4e913891ab5c5106d4c689b0c16f7ef
        repository: kumahq/kuma

    - uses: actions/download-artifact@v2
      with:
        name: envoy_${{ github.sha }}

    - name: Display structure of downloaded files
      run: |
        ls -R
        ls -R ../

  cleanup:
    if: github.event.inputs.cleanup == 'true'
    needs:
    - build-envoy
    runs-on: ubuntu-latest
    steps:
    - name: Set name of the VM to outputs
      uses: actions/github-script@v5
      id: setVMName
      with:
        script: |
          let name = context.payload.inputs.vmName;
          
          if (!name) {
            name = context.sha.substring(0, 8);
          }
          
          core.setOutput("name", name);

    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Delete Custom Runners
      uses: actions/github-script@v5
      if: always()
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const response = await github.rest.actions.listSelfHostedRunnersForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const runners = response.data.runners.filter(({ name }) => name === '${{ steps.setVMName.outputs.name }}');

          await Promise.all(runners.map(({ id }) => github.rest.actions.deleteSelfHostedRunnerFromRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            runner_id: id,
          })));

    - name: Delete Azure VM
      uses: azure/CLI@v1
      if: always()
      with:
        azcliversion: 2.31.0
        inlineScript: |
          vmID=$(az vm show \
            --resource-group ${{ secrets.AZURE_ENVOY_BUILD_RESOURCE_GROUP }} \
            --name ${{ steps.setVMName.outputs.name }} \
            --query id \
            -o tsv 2> /dev/null)
          
          vmNIC=$(az vm nic list \
            --resource-group ${{ secrets.AZURE_ENVOY_BUILD_RESOURCE_GROUP }} \
            --vm-name ${{ steps.setVMName.outputs.name }} \
            --query [].id \
            -o tsv 2> /dev/null)
          
          if [ -n $wmNIC ]; then
            vmIP=$(az network nic show \
              --ids $vmNIC \
              --query "ipConfigurations[].publicIpAddress.id" \
              -o tsv 2> /dev/null)
          
            vmNSG=$(az network nic show \
              --ids $vmNIC \
              --query "networkSecurityGroup.id" \
              -o tsv 2> /dev/null)
          fi
          
          if [ -n $vmID ]; then
            az vm delete \
              --ids $vmID \
              --yes
          fi

          if [ -n $vmIP ]; then          
            az network public-ip delete \
              --ids $vmIP
          fi
          
          if [ -n $vmNSG ]; then
            az network nsg delete \
              --ids $vmNSG
          fi
